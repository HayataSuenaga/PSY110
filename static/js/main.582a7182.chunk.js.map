{"version":3,"sources":["data/dataTypes.js","store/experiment.js","store/store.js","components/hypthesis/OpDefModal.js","components/hypthesis/OpDefRow.js","components/hypthesis/OpDefTable.js","components/hypthesis/HypothesisPage.js","data/texts.js","components/variables/VariableModal.js","components/variables/VariableRow.js","components/variables/VariableTable.js","components/variables/VariablePage.js","components/population/PopulationPage.js","components/confounds/ConfoundEdit.js","components/confounds/Confound.js","components/confounds/ConfoundTable.js","components/confounds/ConfoundPage.js","components/ExpTable.js","components/Result.js","components/ExperimentStepper.js","components/App.js","index.js"],"names":["opDefId","variableId","confoundId","experimentSlice","createSlice","name","initialState","hypothesis","opDefs","variables","population","samplingMethod","sample","confounds","reducers","updateHypothesis","state","action","payload","addOpDef","term","def","push","id","createOpDef","deleteOpDef","filter","updateOpDef","index","findIndex","opDef","addVariable","type","description","createVariable","deleteVariable","variable","updateVariable","updatePopulation","updateSamplingMethod","updateSample","addConfound","measure","createConfound","deleteConfound","confound","updateConfound","actions","store","configureStore","reducer","style","position","top","left","transform","minWidth","p","OpDefModal","open","onClose","onChange","onSave","Modal","Paper","sx","Grid","container","direction","spacing","item","marginLeft","Button","onClick","TextField","label","variant","fullWidth","value","e","target","OpDefRow","onSelect","onDelete","TableRow","TableCell","OpDefTable","TableContainer","component","Table","TableHead","textAlign","undefined","TableBody","map","HypothesisPage","useSelector","dispatch","useDispatch","useState","setOpen","chosenDef","setChosenDef","Card","Typography","multiline","minRows","width","onHypothesisChange","console","log","change","VariableType","VariableModal","props","handleClose","justifyContent","alignItems","Chip","VariableRow","VariableTable","Variables","chosenVariable","setChosenVariable","Box","Method","PopulationPage","FormControl","InputLabel","Select","MenuItem","ConfoundEdit","setEditing","setName","setMeasure","xs","pl","IconButton","Confound","ConfoundTable","editing","List","ListItem","ConfoundPage","ExpTable","items","fields","length","Object","keys","field","values","Result","my","mb","typography","steps","ExperimentStepper","theme","useTheme","activeStep","setActiveStep","handleNext","handleBack","handleReset","StepHeader","Stepper","marginTop","marginBottom","Step","StepLabel","StepFooter","display","flexDirection","pt","disabled","mr","flex","StepBody","FinalPage","App","Container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.582a7182.chunk.js","sourcesContent":["let opDefId = 0;\nlet variableId = 0;\nlet confoundId = 0;\n\nconst createOpDef = (term, def) => {\n  opDefId += 1;\n  return { id: opDefId, term, def };\n};\nconst createVariable = (type, name, description) => {\n  variableId += 1;\n  return { id: variableId, type, name, description };\n};\nconst createConfound = (name, measure) => {\n  confoundId += 1;\n  return { id: confoundId, name, measure };\n};\n\nexport { createOpDef, createVariable, createConfound };","import { createSlice } from \"@reduxjs/toolkit\";\nimport { createOpDef, createVariable, createConfound } from \"../data/dataTypes\";\n\nconst initialState = {\n  hypothesis: '',\n  opDefs: [],\n  variables: [],\n  population: '',\n  samplingMethod: '',\n  sample: '',\n  confounds: []\n};\n\nconst experimentSlice = createSlice({\n  name: 'experiment',\n  initialState,\n  reducers: {\n    updateHypothesis: (state, action) => {\n      state.hypothesis = action.payload.hypothesis;\n      return state;\n    },\n    addOpDef: (state, action) => {\n      const { term, def } = action.payload;\n      state.opDefs.push(createOpDef(term, def));\n      return state;\n    },\n    deleteOpDef: (state, action) => {\n      const { id } = action.payload;\n      state.opDefs = state.opDefs.filter(def => def.id !== id);\n      return state;\n    },\n    updateOpDef: (state, action) => {\n      const { id } = action.payload;\n      const index = state.opDefs.findIndex(opDef => opDef.id === id);\n      state.opDefs[index] = action.payload;\n      return state;\n    },\n    addVariable: (state, action) => {\n      const { type, name, description } = action.payload;\n      state.variables.push(createVariable(type, name, description));\n      return state;\n    },\n    deleteVariable: (state, action) => {\n      const { id } = action.payload;\n      state.variables = state.variables.filter(variable => variable.id !== id);\n      return state;\n    },\n    updateVariable: (state, action) => {\n      const { id } = action.payload;\n      const index = state.variables.findIndex(variable => variable.id === id);\n      state.variables[index] = action.payload;\n      return state;\n    },\n    updatePopulation: (state, action) => {\n      state.population = action.payload.population;\n    },\n    updateSamplingMethod: (state, action) => {\n      state.samplingMethod = action.payload.samplingMethod;\n    },\n    updateSample: (state, action) => {\n      state.sample = action.payload.sample;\n    },\n    addConfound: (state, action) => {\n      const { name, measure } = action.payload;\n      state.confounds.push(createConfound(name, measure));\n      return state;\n    },\n    deleteConfound: (state, action) => {\n      const { id } = action.payload;\n      state.confounds = state.confounds.filter(confound => confound.id !== id);\n      return state;\n    },\n    updateConfound: (state, action) => {\n      const { id } = action.payload;\n      const index = state.confounds.findIndex(confound => confound.id === id);\n      state.confounds[index] = action.payload;\n      return state;\n    }\n  }\n});\n\nexport const {\n  updateHypothesis,\n  addOpDef,\n  deleteOpDef,\n  updateOpDef,\n  // addVariable,\n  // deleteVariable,\n  // updateVariable,\n  updatePopulation,\n  updateSamplingMethod,\n  updateSample,\n  addConfound,\n  deleteConfound,\n  updateConfound\n} = experimentSlice.actions;\n\nconst { actions } = experimentSlice;\n// export const updateHypothesis = hypothesis => actions.updateHypothesis({ hypothesis });\n// export const addOpDef = (term, def) => actions.addOpDef({ term, def });\n// export const deleteOpDef = id => actions.deleteOpDef({ id });\n// export const updateOpDef = (id, term, def) => actions.updateOpDef({ id, term, def });\nexport const addVariable = (type, name, description) => actions.addVariable({ type, name, description });\nexport const deleteVariable = id => actions.deleteVariable({ id });\nexport const updateVariable = (id, type, name, description) => actions.updateVariable({ id, type, name, description });\n// export const addConfound = (name, measure) => actions.addConfound({ name, measure });\n// export const deleteConfound = id => actions.deleteConfound({ id });\n// export const updateConfound = (id, name, measure) => actions.updateConfound({id, name, measure});\n\nexport default experimentSlice.reducer;","import { configureStore } from \"@reduxjs/toolkit\";\nimport reducer from './experiment';\n\nconst store = configureStore({ reducer });\n\nexport default store;","import { Grid, Button, TextField, Modal, Paper } from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  minWidth: '50vw',\n  p: 5,\n};\n\nconst OpDefModal = ({ open, onClose, opDef, onChange, onSave }) => {\n  return (\n    <Modal open={open} onClose={onClose}>\n      <Paper sx={style}>\n        <Grid container direction=\"column\" spacing={2}>\n          <Grid item sx={{ marginLeft: 'auto' }}>\n            <Button onClick={onClose}>\n              <ClearIcon />\n            </Button>\n          </Grid>\n          <Grid item>\n            <TextField\n              id=\"standard-basic\"\n              label=\"Term\"\n              variant=\"standard\"\n              fullWidth\n              value={opDef.term}\n              onChange={e => onChange({ term: e.target.value})}\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              id=\"standard-basic\"\n              label=\"Definition\"\n              variant=\"standard\"\n              fullWidth\n              value={opDef.def}\n              onChange={e => onChange({ def: e.target.value })}\n            />\n          </Grid>\n          <Grid item sx={{ marginLeft: 'auto' }}>\n            <Button onClick={onSave}>Done</Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nexport default OpDefModal;\n","import { Button, TableRow, TableCell } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\n\nconst OpDefRow = ({ opDef, onSelect, onDelete }) => {\n  return (\n    <TableRow>\n      <TableCell>{opDef.term}</TableCell>\n      <TableCell>{opDef.def}</TableCell>\n      <TableCell>\n        <Button onClick={() => onSelect(opDef)}>\n          <EditIcon />\n        </Button>\n        <Button onClick={() => onDelete(opDef.id)}>\n          <DeleteIcon />\n        </Button>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default OpDefRow;\n","import {\n  Table,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Button,\n  TableBody,\n  Paper,\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport OpDefRow from './OpDefRow';\n\nconst getBlankDef = () => ({\n  id: undefined,\n  term: '',\n  def: '',\n});\n\nconst OpDefTable = ({ opDefs, onSelect, onDelete }) => {\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Term</TableCell>\n            <TableCell>Definition</TableCell>\n            <TableCell sx={{textAlign: 'end'}}>\n              <Button>\n                <AddIcon onClick={() => onSelect(getBlankDef())} />\n              </Button>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {opDefs.map((opDef, index) => (\n            <OpDefRow\n              key={index}\n              opDef={opDef}\n              onSelect={onSelect}\n              onDelete={onDelete}\n            />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default OpDefTable;\n","import { Grid, Button, Card, TextField, Typography } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  hypothesis as hypothesisText,\n  operationalDef as operationalDefText,\n} from '../../data/texts';\nimport { useState } from 'react';\n\nimport OpDefModal from './OpDefModal';\nimport OpDefTable from './OpDefTable';\n\nimport {\n  updateHypothesis,\n  addOpDef,\n  deleteOpDef,\n  updateOpDef,\n} from '../../store/experiment';\n\nconst HypothesisPage = () => {\n  const opDefs = useSelector(state => state.opDefs);\n  const hypothesis = useSelector(state => state.hypothesis);\n  const dispatch = useDispatch();\n\n  const [open, setOpen] = useState(false);\n  const [chosenDef, setChosenDef] = useState({});\n\n  const onHypothesisChange = hypothesis =>\n    dispatch(updateHypothesis({ hypothesis }));\n\n  const onSelect = def => {\n    console.log(def);\n    setChosenDef(def);\n    setOpen(true);\n  };\n\n  const onChange = change => setChosenDef({ ...chosenDef, ...change });\n\n  const onSave = () => {\n    if (chosenDef.id === undefined) dispatch(addOpDef(chosenDef));\n    else dispatch(updateOpDef(chosenDef));\n    setOpen(false);\n  };\n\n  const onDelete = id => dispatch(deleteOpDef({ id }));\n  const onClose = id => setOpen(false);\n\n  return (\n    <>\n      <Grid container direction=\"column\" spacing={2}>\n        <Grid item>\n          <Card sx={{ p: 2 }}>\n            <Typography variant=\"body2\">{hypothesisText}</Typography>\n          </Card>\n        </Grid>\n        <Grid item>\n          <TextField\n            id=\"outlined-multiline-flexible\"\n            label=\"Your hypothesis\"\n            multiline\n            minRows={4}\n            variant=\"outlined\"\n            sx={{ width: '100%' }}\n            value={hypothesis}\n            onChange={e => onHypothesisChange(e.target.value)}\n          />\n        </Grid>\n        <Grid item>\n          <Card sx={{ p: 2 }}>\n            <Typography variant=\"body2\">{operationalDefText}</Typography>\n          </Card>\n        </Grid>\n        <Grid item>\n          <OpDefTable opDefs={opDefs} onSelect={onSelect} onDelete={onDelete} />\n        </Grid>\n      </Grid>\n      <OpDefModal\n        open={open}\n        onClose={onClose}\n        opDef={chosenDef}\n        onChange={onChange}\n        onSave={onSave}\n      />\n    </>\n  );\n};\n\nexport default HypothesisPage;\n","export const hypothesis = 'Write your hypothesis. Compared to a theory, which is an explanation and prediction of a phenomenon, a hypothesis is more specific. A hypothesis must be testable. In other words, a hypothesis is a prediction that you can either support or rebut based on results of an experiment.';\n\nexport const operationalDef = 'List out operational definitions. If you have any unclear terms that can permit several interpretations, define the term\\'s specific meaning in the context of your hypothesis.';\n\nexport const variableText = 'List out variables that needs to be measured in the experiment. Variables need to be quantitative. If you have any qualitative variables, think how you can use any quantitative measurements to represent qualitative variables. There are two kinds of variables -- dependent and independent. An independent variable is an aspect of an experiment you control. You are going to measure how dependent variables change as a result of manipulations on independent variables.';\n\nexport const populationText = 'You need to define the scope to which you test your hypothesis. Is your hypothesis about students of your school? Or students in four-year universities in the U.S.? Or adults in Western countries? Think about how much generalization you want from the result of your experiment. That defines the population of interest for your experiment. It is ideal to use the \"random sampling method\" -- randomly selecting the subject of your experiment from the population of interest. However, it is also a convention to use \"convenience sampling method,\" in which an experiment\\'s subject are chosen from a subset of the population that is easily obtained. When using convenience sampling method, the subset of the population is not biased in any significant way.';\n\nexport const confoundText = 'In conducting experiments, it is common that unintended variables are introduced in the experiment environment. These variables are called confounds and can distort experiment results. It is crucial that preventive measures are taken in advance to prevent any confounds from influencing the experiment. Think deeply and list out all potential confounds that might be introduced in conducting your experiment. For each confound, write down what preventive measure you are going to take.';","import { Modal, Grid, TextField, Chip, Paper, Button } from '@mui/material';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useState } from 'react';\n\n// Style for modal\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  minWidth: '50vw',\n  p: 5,\n};\n// Enum for variable types\nconst VariableType = {\n  independent: 'independent',\n  dependent: 'dependent',\n};\n// This is a functional component\nconst VariableModal = props => {\n  // Get all the props\n  const { variable, open, handleClose, onSave, onChange } = props;\n  // Function for toggling the variable type\n  const toggleType = () => {\n    if (variable.type === VariableType.independent)\n      onChange({ type: VariableType.dependent });\n    else onChange({ type: VariableType.independent });\n  };\n  // Return a modal\n  return (\n    <Modal open={open} onClose={handleClose}>\n      <Paper sx={style}>\n        <Grid container direction=\"column\" spacing={2}>\n          <Grid item>\n            <Grid\n              container\n              justifyContent=\"space-between\"\n              alignItems=\"flex-end\"\n            >\n              <Grid item>\n                <Chip label={variable.type} onClick={toggleType} />\n              </Grid>\n              <Grid item>\n                <Button onClick={handleClose}>\n                  <CloseIcon />\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <TextField\n              label=\"variable name\"\n              value={variable.name}\n              onChange={e => onChange({ name: e.target.value })}\n              variant=\"standard\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item>\n            <TextField\n              label=\"explanation\"\n              value={variable.description}\n              onChange={e => onChange({ description: e.target.value })}\n              variant=\"standard\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item sx={{ marginLeft: 'auto' }}>\n            <Button\n              onClick={() => {\n                handleClose();\n                onSave(variable);\n              }}\n            >\n              Done\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nexport default VariableModal;\n","import { Chip, TableRow, TableCell, Button } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst VariableRow = ({ variable, onSelect, onDelete }) => {\n  return (\n    <TableRow>\n      <TableCell><Chip label={variable.type} /></TableCell>\n      <TableCell>{variable.name}</TableCell>\n      <TableCell>{variable.description}</TableCell>\n      <TableCell>\n        <Button onClick={() => onSelect(variable)}><EditIcon /></Button>\n        <Button onClick={() => onDelete(variable.id)}><DeleteIcon /></Button>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nexport default VariableRow;","import {\n  Paper,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Button,\n} from '@mui/material';\nimport VariableRow from './VariableRow';\n\n// A default variable for a new variable creation\nconst getBlankVariable = () => ({\n  id: undefined,\n  type: 'independent',\n  name: '',\n  description: ''\n});\n\nconst VariableTable = ({ variables, onSelect, onDelete }) => {\n  return (\n    <TableContainer component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Variable type</TableCell>\n            <TableCell>Variable name</TableCell>\n            <TableCell>Description</TableCell>\n            <TableCell sx={{textAlign: \"end\"}}>\n              <Button onClick={() => onSelect(getBlankVariable())}>\n                Add\n              </Button>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {variables.map((variable, index) => (\n            <VariableRow\n              key={index}\n              variable={variable}\n              onSelect={onSelect}\n              onDelete={onDelete}\n            />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default VariableTable;\n","import { Card, Typography, Grid, Box } from '@mui/material';\nimport { useState } from 'react';\n\nimport VariableModal from './VariableModal';\nimport VariableTable from './VariableTable';\nimport { variableText } from '../../data/texts';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  addVariable,\n  deleteVariable,\n  updateVariable,\n} from '../../store/experiment';\n\nconst Variables = () => {\n  const [open, setOpen] = useState(false);\n  const [chosenVariable, setChosenVariable] = useState({});\n  // Get the dispatch function from the store\n  const dispatch = useDispatch();\n  // Get the variables from the store\n  const variables = useSelector(state => state.variables);\n  // Dispatch actions when user saved a variable on modal\n  const onSave = variable => {\n    const { id, type, name, description } = chosenVariable;\n    if (id === undefined) dispatch(addVariable(type, name, description));\n    else dispatch(updateVariable(id, type, name, description));\n  };\n  // Handle user inputs on modal\n  const onChange = change => {\n    setChosenVariable({ ...chosenVariable, ...change });\n  }\n  // Dispatch the deleteVariable action when user deletes a variable\n  const onDelete = id => dispatch(deleteVariable(id));\n\n  return (\n    <Box>\n      <Grid container direction=\"column\" spacing={2}>\n        <Grid item>\n          <Card sx={{ p: 2 }}>\n            <Typography variant=\"body2\">{variableText}</Typography>\n          </Card>\n        </Grid>\n        <Grid item>\n          <VariableTable\n            open={open}\n            setOpen={setOpen}\n            variables={variables}\n            onSelect={variable => {\n              setChosenVariable(variable);\n              setOpen(true);\n            }}\n            onDelete={onDelete}\n          />\n        </Grid>\n      </Grid>\n      <VariableModal\n        open={open}\n        handleClose={() => setOpen(false)}\n        onChange={onChange}\n        onSave={onSave}\n        variable={chosenVariable}\n      />\n    </Box>\n  );\n};\n\nexport default Variables;\n","import {\n  TextField,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  Grid,\n  Paper,\n  Typography,\n} from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { populationText } from '../../data/texts';\n\nimport {\n  updatePopulation,\n  updateSamplingMethod,\n  updateSample,\n} from '../../store/experiment';\n\nconst Method = {\n  convenience: 'convenience',\n  random: 'random',\n};\n\nconst PopulationPage = () => {\n  const population = useSelector(state => state.population);\n  const samplingMethod = useSelector(state => state.samplingMethod);\n  const sample = useSelector(state => state.sample);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Grid container direction=\"column\" spacing={2}>\n        <Grid item>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"body2\">{populationText}</Typography>\n          </Paper>\n        </Grid>\n        <Grid item>\n          <TextField\n            label=\"Population\"\n            variant=\"outlined\"\n            fullWidth\n            multiline\n            minRows={4}\n            value={population}\n            onChange={e =>\n              dispatch(updatePopulation({ population: e.target.value }))\n            }\n          />\n        </Grid>\n        <Grid item>\n          <FormControl variant=\"standard\" fullWidth>\n            <InputLabel>Sampling Method</InputLabel>\n            <Select\n              value={samplingMethod}\n              onChange={e =>\n                dispatch(\n                  updateSamplingMethod({ samplingMethod: e.target.value })\n                )\n              }\n            >\n              <MenuItem value={Method.convenience}>\n                Convenience Sampling\n              </MenuItem>\n              <MenuItem value={Method.random}>Random Sampling</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item>\n          <TextField\n            label=\"Sample\"\n            variant=\"standard\"\n            fullWidth\n            multiline\n            value={sample}\n            onChange={e => dispatch(updateSample({ sample: e.target.value }))}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default PopulationPage;\n","import { Grid, IconButton, TextField } from '@mui/material';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { useDispatch } from 'react-redux';\nimport { addConfound, updateConfound } from '../../store/experiment';\nimport { useState } from 'react';\n\nconst ConfoundEdit = ({ confound, setEditing }) => {\n  const [name, setName] = useState(confound ? confound.name : '');\n  const [measure, setMeasure] = useState(confound ? confound.measure : '');\n  const dispatch = useDispatch();\n\n  const onSave = () => {\n    if (confound) dispatch(updateConfound({ name, measure }));\n    else dispatch(addConfound({ name, measure }));\n    setEditing(undefined);\n  };\n\n  return (\n    <Grid container>\n      <Grid item xs={4}>\n        <TextField\n          value={name}\n          variant=\"standard\"\n          fullWidth\n          onChange={e => setName(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={7} sx={{pl: 2}}>\n        <TextField\n          value={measure}\n          variant=\"standard\"\n          fullWidth\n          onChange={e => setMeasure(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={1} sx={{ textAlign: 'right' }}>\n        <IconButton onClick={onSave}>\n          <CheckIcon />\n        </IconButton>\n        <IconButton onClick={() => setEditing(undefined)}>\n          <CloseIcon />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ConfoundEdit;\n","import { Grid, Typography, IconButton } from '@mui/material';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useDispatch } from 'react-redux';\nimport { deleteConfound } from '../../store/experiment';\n\nconst Confound = ({ confound, setEditing }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Grid container>\n      <Grid item xs={4}>\n        <Typography>{confound.name}</Typography>\n      </Grid>\n      <Grid item xs={7} sx={{ pl: 2 }}>\n        <Typography>{confound.measure}</Typography>\n      </Grid>\n      <Grid item xs={1} sx={{ textAlign: 'right' }}>\n        <IconButton\n          onClick={() => {\n            console.log(confound.id);\n            setEditing(confound.id);\n          }}\n        >\n          <EditIcon />\n        </IconButton>\n        <IconButton\n          onClick={() => dispatch(deleteConfound({ id: confound.id }))}\n        >\n          <DeleteIcon />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Confound;\n","import { useState } from 'react';\n\nimport {\n  List,\n  Grid,\n  Typography,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  Button,\n  TableBody,\n  Paper,\n  ListItem,\n  ListItemText,\n  IconButton,\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\n\nimport { useSelector } from 'react-redux';\nimport ConfoundRow from './ConfoundRow';\nimport ConfoundEdit from './ConfoundEdit';\n\nimport { deleteConfound } from '../../store/experiment';\nimport Confound from './Confound';\n\nconst ConfoundTable = () => {\n  const confounds = useSelector(state => state.confounds);\n  const [editing, setEditing] = useState(undefined);\n\n  return (\n    <List component={Paper}>\n      <ListItem>\n        <Grid container>\n          <Grid item xs={4}>\n            <Typography>Confounds</Typography>\n          </Grid>\n          <Grid item xs={7} sx={{ pl: 2 }}>\n            <Typography>Preventive Measure</Typography>\n          </Grid>\n        </Grid>\n      </ListItem>\n      {confounds.map(confound => (\n        <ListItem key={confound.id}>\n          {confound.id === editing ? (\n            <ConfoundEdit confound={confound} setEditing={setEditing} />\n          ) : (\n            <Confound confound={confound} setEditing={setEditing} />\n          )}\n        </ListItem>\n      ))}\n      <ListItem>\n        {editing === 0 ? (\n          <ConfoundEdit setEditing={setEditing} />\n        ) : (\n          <Grid container justifyContent=\"center\" alignItems=\"center\">\n            <Grid item>\n              <IconButton onClick={() => setEditing(0)}>\n                <AddIcon />\n              </IconButton>\n            </Grid>\n          </Grid>\n        )}\n      </ListItem>\n    </List>\n    // <TableContainer component={Paper}>\n    //   <Table>\n    //     <TableHead>\n    //       <TableRow>\n    //         <TableCell>Confound</TableCell>\n    //         <TableCell>Preventive measure</TableCell>\n    //         <TableCell>\n    //           <Button>\n    //             <AddIcon />\n    //           </Button>\n    //         </TableCell>\n    //       </TableRow>\n    //     </TableHead>\n    //     <TableBody>\n    //       {confounds.map((confound, index) => <ConfoundRow key={index} confound={confound} />)}\n    //     </TableBody>\n    //   </Table>\n    // </TableContainer> */}\n  );\n};\n\nexport default ConfoundTable;\n","import { Grid, Paper, Typography } from '@mui/material';\n\nimport { confoundText } from '../../data/texts';\nimport ConfoundTable from './ConfoundTable';\n\nconst createConfound = (name, measure) => ({ name, measure });\nconst confounds = [\n  createConfound(\n    'Lorem ipsum dolor sit amet',\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ultrices felis vitae convallis mattis. Aliquam rutrum tincidunt nibh tempor porttitor.'\n  ),\n  createConfound(\n    'Lorem ipsum dolor sit amet',\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque ultrices felis vitae convallis mattis. Aliquam rutrum tincidunt nibh tempor porttitor.'\n  ),\n];\n\nconst ConfoundPage = () => {\n  return (\n    <Grid container direction=\"column\" sx={{ p: 2 }} spacing={2}>\n      <Grid item>\n        <Paper sx={{ p: 2 }}>\n          <Typography variant=\"body2\">{confoundText}</Typography>\n        </Paper>\n      </Grid>\n      <Grid item>\n        <ConfoundTable />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ConfoundPage;\n","import { Table, TableHead, TableBody, TableRow, TableCell, Paper } from '@mui/material';\n\nconst ExpTable = ({ items }) => {\n\n  const fields = items.length !== 0 ? Object.keys(items[0]) : [];\n\n  return (\n    <Table component={Paper}>\n      <TableHead>\n        <TableRow>\n          {fields.map(field => (\n            <TableCell>{field}</TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {items.map(item => (\n          <TableRow>\n            {Object.values(item).map(value => (\n              <TableCell>{value}</TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n\nexport default ExpTable;","import { useSelector } from 'react-redux';\nimport { Box, Card, Typography, Paper, TableHead } from '@mui/material';\n\nimport ExpTable from './ExpTable';\n\nconst Result = () => {\n  const hypothesis = useSelector(state => state.hypothesis);\n  const opDefs = useSelector(state => state.opDefs);\n  const variables = useSelector(state => state.variables);\n  const population = useSelector(state => state.population);\n  const samplingMethod = useSelector(state => state.samplingMethod);\n  const sample = useSelector(state => state.sample);\n  const confounds = useSelector(state => state.confounds);\n\n  return (\n    <Box>\n      <Typography variant=\"h6\">Hypothesis</Typography>\n      <Paper sx={{ p: 2, my: 2 }}>\n        <Card sx={{ p: 2, mb: 2, typography: 'body1' }}>{hypothesis}</Card>\n        <ExpTable items={opDefs} />\n      </Paper>\n      <Typography variant=\"h6\">Variables</Typography>\n      <Paper sx={{ p: 2, my: 2 }}>\n        <ExpTable items={variables} />\n      </Paper>\n      <Typography variant=\"h6\">Population</Typography>\n      <Paper sx={{ p: 2, my: 2 }}>\n        <Typography>{`Population: ${population}`}</Typography>\n        <Typography>{`Sampling Method: ${samplingMethod}`}</Typography>\n        <Typography>{`Sample: ${sample}`}</Typography>\n      </Paper>\n      <Typography variant=\"h6\">Confounds</Typography>\n      <Paper sx={{ p: 2, my: 2 }}>\n        <ExpTable items={confounds} />\n      </Paper>\n    </Box>\n  );\n};\n\nexport default Result;\n","import { useState } from 'react';\nimport {\n  Box,\n  Stepper,\n  Step,\n  StepLabel,\n  Button\n} from '@mui/material';\n\nimport HypothesisPage from './hypthesis/HypothesisPage';\nimport Variables from './variables/VariablePage';\nimport PopulationPage from './population/PopulationPage';\nimport ConfoundPage from './confounds/ConfoundPage';\n\nimport { useTheme } from '@mui/material';\nimport Result from './Result';\n\nconst steps = ['Hypothesis', 'Variables', 'Sample', 'Potential confounds'];\n\nconst ExperimentStepper = () => {\n  const theme = useTheme();\n  const [activeStep, setActiveStep] = useState(0);\n  const handleNext = () => setActiveStep(activeStep + 1);\n  const handleBack = () => setActiveStep(activeStep - 1);\n  const handleReset = () => setActiveStep(0);\n\n  const StepHeader = () => (\n    <Stepper\n      activeStep={activeStep}\n      sx={{ marginTop: theme.spacing(4), marginBottom: theme.spacing(4) }}\n    >\n      {steps.map((label, index) => (\n        <Step key={index}>\n          <StepLabel>{label}</StepLabel>\n        </Step>\n      ))}\n    </Stepper>\n  );\n\n  const StepFooter = () => (\n    <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n      <Button\n        variant=\"contained\"\n        disabled={activeStep === 0}\n        onClick={handleBack}\n        sx={{ mr: 1 }}\n      >\n        Back\n      </Button>\n      <Box sx={{ flex: '1 1 auto' }} />\n      <Button onClick={handleNext} variant=\"contained\">\n        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n      </Button>\n    </Box>\n  );\n\n  const StepBody = () => {\n    switch (activeStep) {\n      case 0:\n        return <HypothesisPage />;\n      case 1:\n        return <Variables />;\n      case 2:\n        return <PopulationPage />;\n      case 3:\n        return <ConfoundPage />;\n      default:\n        return <PopulationPage />;\n    }\n  };\n\n  const FinalPage = () => (\n    <>\n      <Result />\n      <Box sx={{ display: 'flex', flexDirection: 'row', pt: 2 }}>\n        <Button variant=\"contained\" onClick={handleBack}>Back</Button>\n        <Box sx={{ flex: '1 1 auto' }} />\n        <Button onClick={handleReset}>Reset</Button>\n      </Box>\n    </>\n  );\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <StepHeader />\n      {activeStep === steps.length ? (\n        <FinalPage />\n      ) : (\n        <>\n          <StepBody />\n          <StepFooter />\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default ExperimentStepper;\n","import { Container } from '@mui/material';\nimport { Provider } from 'react-redux';\nimport store from '../store/store';\nimport ExperimentStepper from './ExperimentStepper';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Container>\n        <ExperimentStepper />\n      </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}